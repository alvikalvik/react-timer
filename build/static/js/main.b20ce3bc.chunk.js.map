{"version":3,"sources":["components/Buttons/Buttons.js","services/getFullTime.js","components/TImerarea/Timearea.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonsWrapper","styled","div","Button","button","Buttons","startTimer","stopTimer","pauseTimer","resetTimer","currentState","onClick","disabled","getFullTime","totalSeconds","addZero","num","seconds","minutes","Math","floor","hours","TimeareaWrapper","TimeareaElement","Timearea","App","interval","useState","timerState","setTimerState","useEffect","tic","setTimeout","className","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uOAEMA,EAAiBC,IAAOC,IAAV,6LAUdC,EAASF,IAAOG,OAAV,kLAqCGC,EA3BC,SAAC,GAMV,IALLC,EAKI,EALJA,WACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,WACAC,EACI,EADJA,aAEA,OACE,eAACV,EAAD,WACoB,YAAjBU,GAA+C,WAAjBA,EAC7B,cAACP,EAAD,CAAQQ,QAASL,EAAjB,mBAEA,cAACH,EAAD,CAAQQ,QAASJ,EAAjB,kBAEF,cAACJ,EAAD,CACES,SAA2B,YAAjBF,GAA+C,WAAjBA,EACxCC,QAASH,EAFX,mBAMA,cAACL,EAAD,CAAQS,SAA2B,YAAjBF,EAA4BC,QAASF,EAAvD,uBC7BSI,EAbK,SAACC,GACnB,IAAMC,EAAU,SAACC,GACf,OAAOA,GAAO,GAAKA,EAAM,GAAK,IAAMA,EAAMA,GAG5C,MAAO,CACLF,eACAG,QAASF,EAAQD,EAAe,IAChCI,QAASH,EAAQI,KAAKC,MAAMN,EAAe,KAC3CO,MAAON,EAAQI,KAAKC,MAAMN,EAAe,GAAK,OCN5CQ,EAAkBrB,IAAOC,IAAV,6LAUfqB,EAAkBtB,IAAOC,IAAV,6VAuCNsB,EApBE,SAAC,GAAsB,IAApBV,EAAmB,EAAnBA,aAAmB,EACHD,EAAYC,GAAvCO,EAD8B,EAC9BA,MAAOH,EADuB,EACvBA,QAASD,EADc,EACdA,QACvB,OACI,eAACK,EAAD,WACE,eAACC,EAAD,WACE,uCACA,+BAAOF,OAET,eAACE,EAAD,WACE,yCACA,+BAAOL,OAET,eAACK,EAAD,WACE,yCACA,+BAAON,WCkCFQ,MA3Ef,WACE,IAAIC,EADS,EAEuBC,mBAAS,CAC3Cb,aAAc,EACdJ,aAAc,YAJH,mBAENkB,EAFM,KAEMC,EAFN,KAObC,qBAAW,WACuB,WAA5BF,EAAWlB,cACbqB,OAIJ,IAAMA,EAAM,WACVL,EAAWM,YAAY,WACW,WAA5BJ,EAAWlB,cACbmB,EAAc,2BACTD,GADQ,IAEXd,aAAcc,EAAWd,aAAe,OAG1C,MAqCN,OACE,sBAAKmB,UAAU,MAAf,UACE,uCACA,sBAAKA,UAAU,iBAAf,UACE,cAAC,EAAD,CAAUnB,aAAcc,EAAWd,eACnC,cAAC,EAAD,CACER,WAxCW,WACjBuB,EAAc,2BACTD,GADQ,IAEXlB,aAAc,YAEhBwB,cAAcR,IAoCRlB,WAjCW,WACjBqB,EAAc,2BACTD,GADQ,IAEXlB,aAAc,YAEhBwB,cAAcR,IA6BRnB,UA1BU,WAChBsB,EAAc,2BACTD,GADQ,IAEXd,aAAc,EACdJ,aAAc,aAEhBwB,cAAcR,IAqBRjB,WAlBW,WACjBoB,EAAc,2BACTD,GADQ,IAEXd,aAAc,EACdJ,aAAc,YAEhBwB,cAAcR,IAaRhB,aAAckB,EAAWlB,sBC7DpByB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b20ce3bc.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst ButtonsWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n  width: 500px;\r\n  border: 2px solid #000000;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  display: block;\r\n  padding: 20px 40px;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  background-color: #cccccc;\r\n`;\r\n\r\nconst Buttons = ({\r\n  startTimer,\r\n  stopTimer,\r\n  pauseTimer,\r\n  resetTimer,\r\n  currentState,\r\n}) => {\r\n  return (\r\n    <ButtonsWrapper>\r\n      {currentState === \"stopped\" || currentState === \"paused\" ? (\r\n        <Button onClick={startTimer}>Start</Button>\r\n      ) : (\r\n        <Button onClick={stopTimer}>Stop</Button>\r\n      )}\r\n      <Button\r\n        disabled={currentState === \"stopped\" || currentState === \"paused\"}\r\n        onClick={pauseTimer}\r\n      >\r\n        Pause\r\n      </Button>\r\n      <Button disabled={currentState === \"stopped\"} onClick={resetTimer}>\r\n        Reset\r\n      </Button>\r\n    </ButtonsWrapper>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","const getFullTime = (totalSeconds) => {\r\n  const addZero = (num) => {\r\n    return num >= 0 && num < 10 ? \"0\" + num : num;\r\n  };\r\n\r\n  return {\r\n    totalSeconds,\r\n    seconds: addZero(totalSeconds % 60),\r\n    minutes: addZero(Math.floor(totalSeconds / 60)),\r\n    hours: addZero(Math.floor(totalSeconds / 60 / 60)),\r\n  };\r\n};\r\n\r\nexport default getFullTime;\r\n","import styled from 'styled-components';\r\nimport getFullTime from \"../../services/getFullTime\";\r\n\r\nconst TimeareaWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n  width: 500px;\r\n  border: 2px solid #000000;\r\n`;\r\n\r\nconst TimeareaElement = styled.div`\r\n  width: 150px;\r\n  border: 1px solid #444444;\r\n  h3 {\r\n    margin: 10px 20px;\r\n    padding: 10px 0;\r\n    font-size: 18px;\r\n    font-weight: 700;\r\n    border-bottom: 1px solid #444444;\r\n  }\r\n  span {\r\n    display: block;\r\n    margin: 10px 20px;\r\n    padding: 10px 0;\r\n    font-size: 36px;\r\n    font-weight: 700;    \r\n  }\r\n`;\r\n\r\nconst Timearea = ({ totalSeconds }) => {\r\n  const {hours, minutes, seconds} = getFullTime(totalSeconds);\r\n  return (    \r\n      <TimeareaWrapper>\r\n        <TimeareaElement>\r\n          <h3>Hours</h3>\r\n          <span>{hours}</span>\r\n        </TimeareaElement>\r\n        <TimeareaElement>\r\n          <h3>Minutes</h3>\r\n          <span>{minutes}</span>\r\n        </TimeareaElement>\r\n        <TimeareaElement>\r\n          <h3>Seconds</h3>\r\n          <span>{seconds}</span>\r\n        </TimeareaElement>\r\n      </TimeareaWrapper>    \r\n  );\r\n};\r\n\r\nexport default Timearea;\r\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Buttons from \"./components/Buttons/Buttons\";\nimport Timearea from \"./components/TImerarea/Timearea\";\n\nfunction App() {\n  let interval;  \n  const [timerState, setTimerState] = useState({\n    totalSeconds: 0,\n    currentState: \"stopped\", //'runned', 'paused'    \n  });\n\n  useEffect( () => {\n    if (timerState.currentState === 'runned') {\n      tic();\n    }\n  });\n\n  const tic = () => {     \n    interval = setTimeout( () => {\n      if (timerState.currentState === 'runned') {\n        setTimerState({\n          ...timerState,\n          totalSeconds: timerState.totalSeconds + 1,          \n        });\n      }\n    } , 1000);    \n  }; \n\n  const startTimer = () => {     \n    setTimerState({\n      ...timerState,      \n      currentState: \"runned\",        \n    });\n    clearInterval(interval);\n  };  \n\n  const pauseTimer = () => {    \n    setTimerState({\n      ...timerState,\n      currentState: \"paused\",      \n    });\n    clearInterval(interval);\n  };\n\n  const stopTimer = () => {    \n    setTimerState({\n      ...timerState,\n      totalSeconds: 0,\n      currentState: \"stopped\",\n    });\n    clearInterval(interval);\n  };\n\n  const resetTimer = () => {\n    setTimerState({\n      ...timerState,\n      totalSeconds: 0,\n      currentState: \"runned\",\n    });\n    clearInterval(interval);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Timer</h1>\n      <div className=\"timer__wrapper\">\n        <Timearea totalSeconds={timerState.totalSeconds} />\n        <Buttons\n          startTimer={startTimer}\n          pauseTimer={pauseTimer}\n          stopTimer={stopTimer}\n          resetTimer={resetTimer}\n          currentState={timerState.currentState}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(  \n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}